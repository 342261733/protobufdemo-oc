// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Person.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - PersonRoot

@implementation PersonRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueInt32 = 0,
        .singletonName = GPBStringifySymbol(PersonRoot_followersCount),
        .extendedClass = GPBStringifySymbol(Article),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 101,
        .dataType = GPBDataTypeInt32,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueInt32 = 0,
        .singletonName = GPBStringifySymbol(PersonRoot_likesCount),
        .extendedClass = GPBStringifySymbol(Article),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 102,
        .dataType = GPBDataTypeInt32,
        .options = GPBExtensionNone,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
    // None of the imports (direct or indirect) defined extensions, so no need to add
    // them to this registry.
  }
  return registry;
}

@end

#pragma mark - PersonRoot_FileDescriptor

static GPBFileDescriptor *PersonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Article

@implementation Article

@dynamic hasArticleId, articleId;
@dynamic hasArticleExcerpt, articleExcerpt;
@dynamic articlePictureArray, articlePictureArray_Count;
@dynamic hasArticlePagecount, articlePagecount;
@dynamic hasArticleType, articleType;
@dynamic hasAuthor, author;
@dynamic articleNumberofwordsArray, articleNumberofwordsArray_Count;

typedef struct Article__storage_ {
  uint32_t _has_storage_[1];
  int32_t articleId;
  int32_t articlePagecount;
  Article_ArticleType articleType;
  NSString *articleExcerpt;
  NSMutableArray *articlePictureArray;
  Article_Author *author;
  GPBInt32Array *articleNumberofwordsArray;
} Article__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "articleId",
        .dataTypeSpecific.className = NULL,
        .number = Article_FieldNumber_ArticleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Article__storage_, articleId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "articleExcerpt",
        .dataTypeSpecific.className = NULL,
        .number = Article_FieldNumber_ArticleExcerpt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Article__storage_, articleExcerpt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "articlePictureArray",
        .dataTypeSpecific.className = NULL,
        .number = Article_FieldNumber_ArticlePictureArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Article__storage_, articlePictureArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "articlePagecount",
        .dataTypeSpecific.className = NULL,
        .number = Article_FieldNumber_ArticlePagecount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Article__storage_, articlePagecount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "articleType",
        .dataTypeSpecific.enumDescFunc = Article_ArticleType_EnumDescriptor,
        .number = Article_FieldNumber_ArticleType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Article__storage_, articleType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "author",
        .dataTypeSpecific.className = GPBStringifySymbol(Article_Author),
        .number = Article_FieldNumber_Author,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Article__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "articleNumberofwordsArray",
        .dataTypeSpecific.className = NULL,
        .number = Article_FieldNumber_ArticleNumberofwordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Article__storage_, articleNumberofwordsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Article class]
                                     rootClass:[PersonRoot class]
                                          file:PersonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Article__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const GPBExtensionRange ranges[] = {
      { .start = 100, .end = 1001 },
    };
    [localDescriptor setupExtensionRanges:ranges
                                    count:(uint32_t)(sizeof(ranges) / sizeof(GPBExtensionRange))];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Article_ArticleType

GPBEnumDescriptor *Article_ArticleType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Novel\000Prose\000Paper\000Poetry\000";
    static const int32_t values[] = {
        Article_ArticleType_Novel,
        Article_ArticleType_Prose,
        Article_ArticleType_Paper,
        Article_ArticleType_Poetry,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Article_ArticleType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Article_ArticleType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Article_ArticleType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Article_ArticleType_Novel:
    case Article_ArticleType_Prose:
    case Article_ArticleType_Paper:
    case Article_ArticleType_Poetry:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Article_Author

@implementation Article_Author

@dynamic hasName, name;
@dynamic hasPhone, phone;

typedef struct Article_Author__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *phone;
} Article_Author__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Article_Author_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Article_Author__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = Article_Author_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Article_Author__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Article_Author class]
                                     rootClass:[PersonRoot class]
                                          file:PersonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Article_Author__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Article)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Other

@implementation Other

@dynamic testOneofOneOfCase;
@dynamic hasOtherInfo, otherInfo;
@dynamic code1;
@dynamic code2;

typedef struct Other__storage_ {
  uint32_t _has_storage_[2];
  NSString *otherInfo;
  NSString *code1;
  NSString *code2;
} Other__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "otherInfo",
        .dataTypeSpecific.className = NULL,
        .number = Other_FieldNumber_OtherInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Other__storage_, otherInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code1",
        .dataTypeSpecific.className = NULL,
        .number = Other_FieldNumber_Code1,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Other__storage_, code1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code2",
        .dataTypeSpecific.className = NULL,
        .number = Other_FieldNumber_Code2,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Other__storage_, code2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Other class]
                                     rootClass:[PersonRoot class]
                                          file:PersonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Other__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "testOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Other_ClearTestOneofOneOfCase(Other *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
